apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: bundle-snapshot-from-bundle-oci-ta
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Konflux, OLM
    tekton.dev/tags: konflux, bundle, snapshot, olm, trusted-artifacts
    tekton.dev/displayName: "Bundle Snapshot from Bundle (Trusted Artifacts)"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    Creates a Konflux Snapshot from an OLM bundle image by analyzing image references,
    resolving them using IDMS/ICSP policies, and extracting source information from SLSA provenance.
    This variant uses Trusted Artifacts for secure data handling.
    
    Two usage patterns:
    - Build-time: Bundle without provenance, requires BUNDLE_SOURCE_REPO and BUNDLE_SOURCE_COMMIT
    - Test-time (ITS): Bundle with provenance, source info extracted automatically
  params:
  - name: BUNDLE_IMAGE
    description: The OLM bundle image reference to analyze
    type: string
  - name: MIRROR_POLICY_PATH
    description: Path to mirror policy file (IDMS or ICSP - auto-detected, optional)
    type: string
    default: ".tekton/images-mirror-set.yaml"
  - name: VERIFY_PROVENANCE
    description: Whether to verify image provenance using cosign
    type: string
    default: "true"
  - name: OUTPUT_FILE
    description: Output file name for the generated snapshot (relative to SOURCE_ARTIFACT)
    type: string
    default: "konflux-snapshot.yaml"
  - name: APPLICATION_NAME
    description: Application name in snapshot (required for build-time usage)
    type: string
    default: ""
  - name: BUNDLE_SOURCE_REPO
    description: Bundle source repository URL (required for build-time usage when bundle provenance unavailable)
    type: string
    default: ""
  - name: BUNDLE_SOURCE_COMMIT
    description: Bundle source commit SHA (required for build-time usage when bundle provenance unavailable)
    type: string
    default: ""
  - name: NAMESPACE
    description: Target namespace for the snapshot (optional - omit to use current namespace when applying)
    type: string
    default: ""
  - name: BUNDLE_TOOL_IMAGE
    description: Bundle tool container image
    type: string
    default: "konflux-ci/bundle-tool:latest"
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the application source code
    type: string
  - name: SNAPSHOT_ARTIFACT
    description: The Trusted Artifact URI for storing the generated snapshot
    type: string
  results:
  - name: SNAPSHOT_FILE
    description: Path to the generated snapshot file
  - name: IMAGE_COUNT
    description: Number of images found in the bundle
  - name: RESOLVED_COUNT
    description: Number of images successfully resolved
  - name: VERIFIED_COUNT
    description: Number of images with verified provenance
  - name: SNAPSHOT_ARTIFACT_URI
    description: URI of the trusted artifact containing the snapshot
  steps:
  - name: use-trusted-artifact
    image: quay.io/konflux-ci/oci-copy:latest
    args:
      - use
      - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  
  - name: check-files
    image: registry.redhat.io/ubi9/ubi-minimal:latest
    workingDir: /var/workdir/source
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
    script: |
      #!/bin/bash
      set -euo pipefail
      
      echo "Checking for configuration files in trusted artifact..."
      
      # Check for mirror policy file
      if [ -n "$(params.MIRROR_POLICY_PATH)" ] && [ -f "$(params.MIRROR_POLICY_PATH)" ]; then
        echo "✓ Found mirror policy file: $(params.MIRROR_POLICY_PATH)"
        echo "Mirror Policy Content:"
        cat "$(params.MIRROR_POLICY_PATH)"
      else
        echo "ℹ No mirror policy file found at $(params.MIRROR_POLICY_PATH)"
      fi
  
  - name: generate-snapshot
    image: $(params.BUNDLE_TOOL_IMAGE)
    workingDir: /var/workdir/source
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
    env:
    - name: BUNDLE_IMAGE
      value: $(params.BUNDLE_IMAGE)
    - name: MIRROR_POLICY_PATH
      value: $(params.MIRROR_POLICY_PATH)
    - name: VERIFY_PROVENANCE
      value: $(params.VERIFY_PROVENANCE)
    - name: OUTPUT_FILE
      value: $(params.OUTPUT_FILE)
    - name: APPLICATION_NAME
      value: $(params.APPLICATION_NAME)
    - name: BUNDLE_SOURCE_REPO
      value: $(params.BUNDLE_SOURCE_REPO)
    - name: BUNDLE_SOURCE_COMMIT
      value: $(params.BUNDLE_SOURCE_COMMIT)
    - name: NAMESPACE
      value: $(params.NAMESPACE)
    script: |
      #!/bin/bash
      set -euo pipefail
      
      echo "Generating Konflux snapshot from bundle: $BUNDLE_IMAGE"
      
      # Determine usage pattern
      if [ -n "$BUNDLE_SOURCE_REPO" ] && [ -n "$BUNDLE_SOURCE_COMMIT" ]; then
        echo "🔨 Build-time usage: Using provided bundle source information"
        usage_pattern="build-time"
      else
        echo "🧪 Test-time usage: Extracting source information from provenance"
        usage_pattern="test-time"
      fi
      
      # Build bundle-tool command
      cmd="bundle-tool snapshot $BUNDLE_IMAGE"
      
      # Add mirror policy file if it exists
      if [ -n "$MIRROR_POLICY_PATH" ] && [ -f "$MIRROR_POLICY_PATH" ]; then
        cmd="$cmd --mirror-policy $MIRROR_POLICY_PATH"
        echo "Using mirror policy: $MIRROR_POLICY_PATH"
      else
        echo "No mirror policy specified - using original image references"
      fi
      
      # Add build-time parameters if provided
      if [ "$usage_pattern" = "build-time" ]; then
        if [ -n "$APPLICATION_NAME" ]; then
          cmd="$cmd --application $APPLICATION_NAME"
        fi
        cmd="$cmd --bundle-repo $BUNDLE_SOURCE_REPO"
        cmd="$cmd --bundle-commit $BUNDLE_SOURCE_COMMIT"
        echo "Build-time parameters: app=$APPLICATION_NAME, repo=$BUNDLE_SOURCE_REPO, commit=$BUNDLE_SOURCE_COMMIT"
      fi
      
      # Add namespace if provided
      if [ -n "$NAMESPACE" ]; then
        cmd="$cmd --namespace $NAMESPACE"
      fi
      
      # Add output file
      cmd="$cmd --output $OUTPUT_FILE"
      
      echo "Executing: $cmd"
      
      # Execute command and capture output for parsing
      output_log=$(mktemp)
      eval "$cmd" 2>&1 | tee "$output_log"
      
      # Extract metrics from output
      image_count=$(grep -o "Found [0-9]* image references" "$output_log" | grep -o "[0-9]*" || echo "0")
      resolved_count=$(grep -o "Resolved: [0-9]*" "$output_log" | wc -l || echo "0")
      verified_count=$(grep -o "Provenance verified: true" "$output_log" | wc -l || echo "0")
      
      # Write results
      echo -n "$OUTPUT_FILE" > "$(results.SNAPSHOT_FILE.path)"
      echo -n "$image_count" > "$(results.IMAGE_COUNT.path)"
      echo -n "$resolved_count" > "$(results.RESOLVED_COUNT.path)"  
      echo -n "$verified_count" > "$(results.VERIFIED_COUNT.path)"
      
      echo "✓ Snapshot generated successfully: $OUTPUT_FILE"
      echo "📊 Metrics: $image_count images found, $resolved_count resolved, $verified_count verified"
      echo "📋 Usage pattern: $usage_pattern"
      
      # Clean up
      rm -f "$output_log"
  
  - name: validate-snapshot
    image: registry.redhat.io/ubi9/ubi-minimal:latest
    workingDir: /var/workdir/source
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
    script: |
      #!/bin/bash
      set -euo pipefail
      
      OUTPUT_FILE="$(params.OUTPUT_FILE)"
      
      if [ ! -f "$OUTPUT_FILE" ]; then
        echo "❌ Snapshot file not found: $OUTPUT_FILE"
        exit 1
      fi
      
      echo "✓ Validating generated snapshot..."
      
      # Basic YAML validation using built-in tools
      if ! python3 -c "import yaml; yaml.safe_load(open('$OUTPUT_FILE'))" 2>/dev/null; then
        echo "❌ Invalid YAML format in snapshot file"
        cat "$OUTPUT_FILE"
        exit 1
      fi
      
      echo "✓ Snapshot validation passed"
      echo "📄 Generated snapshot preview:"
      head -30 "$OUTPUT_FILE"
  
  - name: create-trusted-artifact
    image: quay.io/konflux-ci/oci-copy:latest
    args:
      - create
      - $(params.SNAPSHOT_ARTIFACT)=/var/workdir/source
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
    script: |
      #!/bin/bash
      set -euo pipefail
      
      echo "Creating trusted artifact with snapshot..."
      echo -n "$(params.SNAPSHOT_ARTIFACT)" > "$(results.SNAPSHOT_ARTIFACT_URI.path)"
      echo "✓ Trusted artifact created: $(params.SNAPSHOT_ARTIFACT)"
      
  volumes:
  - name: workdir
    emptyDir: {}